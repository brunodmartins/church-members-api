// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -destination=./mock/repository_mock.go
//

// Package mock_member is a generated GoMock package.
package mock_member

import (
	context "context"
	reflect "reflect"

	domain "github.com/brunodmartins/church-members-api/internal/constants/domain"
	wrapper "github.com/brunodmartins/church-members-api/platform/aws/wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, specification wrapper.QuerySpecification) ([]*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, specification)
	ret0, _ := ret[0].([]*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, specification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, specification)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, id string) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, id)
}

// Insert mocks base method.
func (m *MockRepository) Insert(ctx context.Context, member *domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), ctx, member)
}

// RetireMembership mocks base method.
func (m *MockRepository) RetireMembership(ctx context.Context, member *domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetireMembership", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetireMembership indicates an expected call of RetireMembership.
func (mr *MockRepositoryMockRecorder) RetireMembership(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetireMembership", reflect.TypeOf((*MockRepository)(nil).RetireMembership), ctx, member)
}

// UpdateContact mocks base method.
func (m *MockRepository) UpdateContact(ctx context.Context, member *domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockRepositoryMockRecorder) UpdateContact(ctx, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockRepository)(nil).UpdateContact), ctx, member)
}
