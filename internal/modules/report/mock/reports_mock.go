// Code generated by MockGen. DO NOT EDIT.
// Source: ./reportsService.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	context "context"
	reflect "reflect"

	enum "github.com/BrunoDM2943/church-members-api/internal/constants/enum"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BirthdayReport mocks base method.
func (m *MockService) BirthdayReport(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BirthdayReport", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BirthdayReport indicates an expected call of BirthdayReport.
func (mr *MockServiceMockRecorder) BirthdayReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BirthdayReport", reflect.TypeOf((*MockService)(nil).BirthdayReport), ctx)
}

// ClassificationReport mocks base method.
func (m *MockService) ClassificationReport(ctx context.Context, classification enum.Classification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassificationReport", ctx, classification)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClassificationReport indicates an expected call of ClassificationReport.
func (mr *MockServiceMockRecorder) ClassificationReport(ctx, classification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassificationReport", reflect.TypeOf((*MockService)(nil).ClassificationReport), ctx, classification)
}

// GetReport mocks base method.
func (m *MockService) GetReport(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockServiceMockRecorder) GetReport(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockService)(nil).GetReport), ctx, name)
}

// LegalReport mocks base method.
func (m *MockService) LegalReport(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegalReport", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LegalReport indicates an expected call of LegalReport.
func (mr *MockServiceMockRecorder) LegalReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegalReport", reflect.TypeOf((*MockService)(nil).LegalReport), ctx)
}

// MarriageReport mocks base method.
func (m *MockService) MarriageReport(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarriageReport", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarriageReport indicates an expected call of MarriageReport.
func (mr *MockServiceMockRecorder) MarriageReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarriageReport", reflect.TypeOf((*MockService)(nil).MarriageReport), ctx)
}

// MemberReport mocks base method.
func (m *MockService) MemberReport(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberReport", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberReport indicates an expected call of MemberReport.
func (mr *MockServiceMockRecorder) MemberReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberReport", reflect.TypeOf((*MockService)(nil).MemberReport), ctx)
}
