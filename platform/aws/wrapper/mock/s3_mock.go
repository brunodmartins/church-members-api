// Code generated by MockGen. DO NOT EDIT.
// Source: ./s3.go

// Package mock_wrapper is a generated GoMock package.
package mock_wrapper

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// Mocks3api is a mock of s3api interface.
type Mocks3api struct {
	ctrl     *gomock.Controller
	recorder *Mocks3apiMockRecorder
}

// Mocks3apiMockRecorder is the mock recorder for Mocks3api.
type Mocks3apiMockRecorder struct {
	mock *Mocks3api
}

// NewMocks3api creates a new mock instance.
func NewMocks3api(ctrl *gomock.Controller) *Mocks3api {
	mock := &Mocks3api{ctrl: ctrl}
	mock.recorder = &Mocks3apiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks3api) EXPECT() *Mocks3apiMockRecorder {
	return m.recorder
}

// PutObject mocks base method.
func (m *Mocks3api) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *Mocks3apiMockRecorder) PutObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*Mocks3api)(nil).PutObject), varargs...)
}

// MockS3APIWrapper is a mock of S3APIWrapper interface.
type MockS3APIWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockS3APIWrapperMockRecorder
}

// MockS3APIWrapperMockRecorder is the mock recorder for MockS3APIWrapper.
type MockS3APIWrapperMockRecorder struct {
	mock *MockS3APIWrapper
}

// NewMockS3APIWrapper creates a new mock instance.
func NewMockS3APIWrapper(ctrl *gomock.Controller) *MockS3APIWrapper {
	mock := &MockS3APIWrapper{ctrl: ctrl}
	mock.recorder = &MockS3APIWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3APIWrapper) EXPECT() *MockS3APIWrapperMockRecorder {
	return m.recorder
}

// PutObject mocks base method.
func (m *MockS3APIWrapper) PutObject(ctx context.Context, key string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3APIWrapperMockRecorder) PutObject(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3APIWrapper)(nil).PutObject), ctx, key, data)
}
