// Code generated by MockGen. DO NOT EDIT.
// Source: ./memberRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	entity "github.com/BrunoDM2943/church-members-api/internal/constants/entity"
	repository "github.com/BrunoDM2943/church-members-api/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockMemberRepository is a mock of MemberRepository interface.
type MockMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepositoryMockRecorder
}

// MockMemberRepositoryMockRecorder is the mock recorder for MockMemberRepository.
type MockMemberRepositoryMockRecorder struct {
	mock *MockMemberRepository
}

// NewMockMemberRepository creates a new mock instance.
func NewMockMemberRepository(ctrl *gomock.Controller) *MockMemberRepository {
	mock := &MockMemberRepository{ctrl: ctrl}
	mock.recorder = &MockMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepository) EXPECT() *MockMemberRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockMemberRepository) FindAll(filters repository.QueryFilters) ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filters)
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMemberRepositoryMockRecorder) FindAll(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMemberRepository)(nil).FindAll), filters)
}

// FindByID mocks base method.
func (m *MockMemberRepository) FindByID(id string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMemberRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMemberRepository)(nil).FindByID), id)
}

// FindMembersActive mocks base method.
func (m *MockMemberRepository) FindMembersActive() ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersActive")
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersActive indicates an expected call of FindMembersActive.
func (mr *MockMemberRepositoryMockRecorder) FindMembersActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersActive", reflect.TypeOf((*MockMemberRepository)(nil).FindMembersActive))
}

// FindMembersActiveAndMarried mocks base method.
func (m *MockMemberRepository) FindMembersActiveAndMarried() ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembersActiveAndMarried")
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembersActiveAndMarried indicates an expected call of FindMembersActiveAndMarried.
func (mr *MockMemberRepositoryMockRecorder) FindMembersActiveAndMarried() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembersActiveAndMarried", reflect.TypeOf((*MockMemberRepository)(nil).FindMembersActiveAndMarried))
}

// GenerateStatusHistory mocks base method.
func (m *MockMemberRepository) GenerateStatusHistory(id string, status bool, reason string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateStatusHistory", id, status, reason, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateStatusHistory indicates an expected call of GenerateStatusHistory.
func (mr *MockMemberRepositoryMockRecorder) GenerateStatusHistory(id, status, reason, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateStatusHistory", reflect.TypeOf((*MockMemberRepository)(nil).GenerateStatusHistory), id, status, reason, date)
}

// Insert mocks base method.
func (m *MockMemberRepository) Insert(member *entity.Member) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", member)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMemberRepositoryMockRecorder) Insert(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMemberRepository)(nil).Insert), member)
}

// UpdateStatus mocks base method.
func (m *MockMemberRepository) UpdateStatus(ID string, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMemberRepositoryMockRecorder) UpdateStatus(ID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMemberRepository)(nil).UpdateStatus), ID, status)
}
